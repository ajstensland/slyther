#!/usr/bin/env python3
from time import sleep
from datetime import datetime
from random import random
from subprocess import run
import json

from src.ui import *
from src.keys import login
import src.socks as socks
from src.contacts import load_contacts, save_contacts, display_contact, display_convo, display_messages


class Application:
    def __init__(self, public, private):
        self.public = public
        self.private = private


    def run(self):
        while True:
            try:
                self.main_menu()
            except KeyboardInterrupt:
                self.quit()


    def main_menu(self):
        """
        Runs the main loop of the program, where the user enters commands.
        
        Args:
            public: The user's public key loaded from login().
            private: The user's private key loaded from login().
        """
        self.display_help()
        commands = {"sm": self.create_message, 
                    "vm": self.messages_menu,
                    "nc": self.new_contact, 
                    "lc": self.list_contacts,
                    "c" : self.clear_screen,
                    "h" : self.display_help,
                    "q" : self.quit 
                    }

        while True:
            command = get_command(commands)
            self.handle_context(commands[command])


    def create_message(self):
        """
        Walks the user through creating a message, and sends the completed message.
        """
        contacts = load_contacts()
        print_bar("SEND MESSAGE")
        recipient = get_recipient(contacts)
        message = input("Message:\n").encode()
        
        try:
            socks.transmit(contacts[recipient], message, self.public, self.private)
        
        except socket.error as e:
            print_red("Error: Failed to connect to contact. Transmission cancelled.\n")
        except socket.timeout:
            print_red("Error: Connection timed out. Transmission incomplete.\n")
        else:
            message_receipt = { "time": datetime.now().strftime("%m/%d/%y %I:%M%p"), 
                                "to": recipient, 
                                "from": "me", 
                                "contents": message.decode()}
            contacts[recipient]["messages"].append(message_receipt)
            save_contacts(contacts)
            print_green("Message delivered successfully.\n")


    def messages_menu(self):
        print_bar("VIEW MESSAGES")
        contacts = load_contacts()
        display_messages(contacts)
        
        contact = ""
        while True:
            contact = input("Enter name to view conversation: ")
            
            if contact in contacts:
                break
            else:
                print_red("Contact not recognized. Please try again.")

        display_convo(contacts[contact])

    def new_contact(self):
        """
        Walks a user through the process of creating a new contact.

        Returns:
            The name of the contact created (used in get_recipient()).
        """
        print_bar("NEW CONTACT")
        contacts = load_contacts()
        print("Enter the information for your new contact...")
        name = input("Name: ")
        ip = get_ip()
        fingerprint = input_default("Fingerprint", None)

        if name not in contacts:
            contacts[name] = {"ip": ip, "fingerprint": fingerprint, "messages": []}
            print_green("Contact added.\n")
        else:
            print_yellow("\n--- Warning: Contact exists ---")
            print_yellow("Existing Contact:")
            display_contact(name, contacts)

            print_yellow("\nNew Contact:")
            print_green(name)
            print("IP:", ip)
            print("Fingerprint:", fingerprint)

            if confirm("\nUpdate contact information for {}? (Y/n) ".format(name)):
                contacts[name]["ip"] = ip
                contacts[name]["fingerprint"] = fingerprint
                print_green("Contact updated.\n")
            else:
                print_green("Contact update cancelled.\n")

        save_contacts(contacts)
        return name

    
    def list_contacts(self):
        """Displays each of the contacts in the contacts file."""
        contacts = load_contacts()
        print_bar("CONTACTS LIST")
        for name in contacts:
            display_contact(name, contacts)


    def clear_screen(self):
        run(["clear"])


    def display_help(self):
        """Displays a list of valid commands and their meanings."""
        print("Enter a command...")
        print("sm   -> New Message")
        print("vm   -> View Messages")
        print("nc   -> New/Update Contact")
        print("lc   -> List Contacts")
        print("c    -> Clear Screen")
        print("h    -> Display help")
        print("q    -> Quit slyther")

    
    def quit(self):
        """Prompts the user to exit slyther."""
        if confirm("\nExit slyther? (Y/n) "):
            exit()


    def handle_context(self, func):
        try:
            func()
        except KeyboardInterrupt:
            print("\n")


if __name__ == "__main__":
    print_banner()
    public, private = login()
    
    Application(public, private).run()
    print_red("Exiting slyther...")

